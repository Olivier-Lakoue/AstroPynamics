import plotly
import plotly.graph_objs as go
import numpy as np
import tools.utils

ITERORBIT = 300
ITERANIM = 300
rmax = 2.4923E+8*1.1

class PlotManager3D:
    """
    3D Plot manager based on plotly due to matplotlib's poor 3D performance

    currently supports :
    - Plotting of bodies
    - Plotting of elliptical orbits
    - Plotting of points on an orbit with true anomaly
    - Animating points along an orbit based on true anomaly and time

    TODO :
    - Support a config manager for color, iteration numbers etc
    - Support hyperbolic trajectory
    - 2D Plotting
    - 2D Map trajectory
    outputs a file called "temp-plot.html" in the main directory
    BEWARE : Files can get huge very quickly with animation of points
    """
    def __init__(self, iterOrbit = 300, iterAnim = 300, title = "Default Title",
    range = 10E6, pointBase = None  , orbitBase = None, filename="plot"):
        self.orbitDict = {}
        self.bodyDict = {}
        self.animList = []
        self.framesList = []
        self.xPoint, self.yPoint, self.zPoint = [],[],[]

        self.ITERORBIT = iterOrbit
        self.ITERANIM = iterAnim

        self.defaultOrbit = orbitBase
        self.defaultPoint = pointBase
        self.fileName = filename

        self.layout = go.Layout(
            scene=dict(
            xaxis = dict(range = [-range,range],),
            yaxis = dict(range = [-range,range],),
            zaxis = dict(range = [-range,range],),),
            title=title,
            showlegend=False,
            updatemenus= [{'type': 'buttons',
                           'buttons': [{'label': 'Play',
                                        'method': 'animate',
                                        'args': [None, dict(frame=dict(duration=20, redraw=False),
                                                     transition=dict(duration=10, easing="quadratic-in-out"),
                                                     fromcurrent=True,
                                                     mode='immediate'
                                                    )]},
                                                {
                                                    'args': [[None], {'frame': {'duration': 0, 'redraw': False}, 'mode': 'immediate',
                                                    'transition': {'duration': 0}}],
                                                    'label': 'Pause',
                                                    'method': 'animate'
                                                }]}])

    def _plotOrbit(self, orbit, paramDict, limits):
        """
        Sub-function called by addOrbit, in order to plot an orbit

        INPUT :
            orbit           -> an Orbit object
            paramDict       -> a dictionary containing width and and color for the line plot
            limits          -> An optional list giving the limits for the plotting (true anomaly)

        OUTPUT :
            scatterOrbit    -> a Scatter3d object used by plotly
        """
        xArray, yArray, zArray = np.array([]), np.array([]), np.array([])

        tAnArray = np.linspace(0, 2*np.pi, ITERORBIT)
        if limits != None:
            tAnArray=np.linspace(limits[0], limits[1], ITERORBIT)

        for i in np.nditer(tAnArray):
            # i = tools.utils.meanToTrue(i, orbit.e)
            x,y,z = orbit.cartesianCoordinates(i)
            xArray = np.append(xArray, x)
            yArray = np.append(yArray, y)
            zArray = np.append(zArray, z)

        pDict = self.defaultOrbit
        if paramDict != None:
            pDict = paramDict

        scatterOrbit = go.Scatter3d(x=xArray, y=yArray, z=zArray, mode='line', line=pDict, marker=dict(size=0.0001, opacity=0))

        return scatterOrbit

    def addOrbit(self, orbit, paramDict = None, limits=None):
        """
        function called by the user to plot an orbit


        INPUT :
            See _plotOrbit documentation for details

        OUTPUT :
            add to orbitDict a list containing the Orbit object and the Scatter3d associated
        """
        plotOrbit = self._plotOrbit(orbit, paramDict, limits)

        self.orbitDict[orbit.id] = [orbit, plotOrbit]

    def _plotBody(self, body):
        """
        Sub-function called by addBody, in order to plot the spherical body

        INPUT :
            body -> A Body object generated by the user

        OUTPUT :
            surfaceBody -> a Surface object used by plotly to 3D plot the sphere
        """
        r = body.r

        theta = np.linspace(0,2*np.pi,100)
        phi = np.linspace(0,np.pi,100)

        x = r*np.outer(np.cos(theta),np.sin(phi))
        y = r*np.outer(np.sin(theta),np.sin(phi))
        z = r*np.outer(np.ones(100),np.cos(phi))

        surfaceBody = go.Surface(x=x, y=y, z=z)
        return surfaceBody

    def addBody(self, body):
        """
        function called by the user to plot a spherical Body

        INPUT :
            See _plotBody for details

        OUTPUT :
            add to bodyDict a list containing the Body object and the Surface associated
        """
        plotBody = self._plotBody(body)
        self.bodyDict[body.name] = [body, plotBody]

    def plotPoint(self, orbit, tAn=None):
        """
        function called by the user to display a simple point

        INPUT :
            orbit   -> An Orbit object on which the point stands
            tAn     -> the true anomaly of the point on the orbit
                       if no value is passed, the default tAn of Orbit is used
        OUTPUT :
            appends x,y and z values to xPoint, yPoint and zPoint lists containing
            coordinates for points in order
        """
        x,y,z = orbit.cartesianCoordinates(trueAnomaly=tAn)
        self.xPoint.append(x)
        self.yPoint.append(y)
        self.zPoint.append(z)

    def animPoint(self, orbit, tAnStart=None, time=3600):
        """
        function called by the user to animate a point on the orbit

        INPUT :
            orbit       -> An Orbit objct which is the point trajectory
            tAnStart    -> starting true anomaly, if none is given then default true anomaly is used
            time        -> the period over which the animation takes place

        OUTPUT :
            appends a list containing x y and z lists to the global animation list
        """
        legTan = orbit.tAn
        if tAnStart != None:
            orbit.tAn = tAnStart

        xValues, yValues, zValues = [],[],[]
        tIter = time/ITERANIM

        for i in range(ITERANIM):
            x,y,z = orbit.cartesianCoordinates()
            xValues.append(x)
            yValues.append(y)
            zValues.append(z)
            orbit.updTime(tIter)

        orbit.updTime(-time)
        orbit.tAn = legTan

        self.animList.append([xValues, yValues, zValues])

    def show(self):
        """
        Function called by the user to generate the plot file defined by filename

        INPUT :
            nothing
        OUTPUT :
            returns a file named filename + ".html" in the main folder containing
            the plot

        """
        data = list()
        for i in self.bodyDict.values():
            data.append(i[1])

        for i in self.orbitDict.values():
            data.append(i[1])

        points = go.Scatter3d(x=self.xPoint, y=self.yPoint, z=self.zPoint, mode='markers', marker=dict(size=3))
        data.append(points)

        if self.animList != []:
            x,y,z = [],[],[]
            for i in range(ITERANIM):
                xTime, yTime, zTime = [],[],[]
                for j in range(len(self.animList)):
                    xTime.append(self.animList[j][0][i])
                    yTime.append(self.animList[j][1][i])
                    zTime.append(self.animList[j][2][i])

                if i==0:
                    data.append(go.Scatter3d(x=xTime, y=yTime, z=zTime, mode='markers', marker={'color': 'green', 'size': 5}))


                frame = {'data':
                [{
                'type' :'scatter3d',
                'x': xTime,
                'y': yTime,
                'z': zTime,
                'mode': 'markers',
                'marker': {'color': 'black', 'size': 4}
                }],
                'traces' : [len(data)-1]
                }

                self.framesList.append(frame)

        fig = go.Figure(data=data, layout=self.layout, frames=self.framesList)
        plotly.offline.plot(fig, filename=self.fileName)
